facet_wrap(. ~ homolog_up_f, strip.position = "bottom", scales = "free", ncol = 5) +
labs(x = "Position (Mb)", y = "Proportion of window") + # Changed axis labels
theme_bw(base_size = 11) +
theme(strip.text = element_text(size = 9.5),
legend.text = element_text(size = 9.5),
strip.background = element_rect(fill = "white"),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
#panel.spacing = unit(-0.1, "cm"),
panel.border = element_rect(color = "white", fill = NA, linewidth = 0)) +
scale_fill_manual("", values = c("#332288", "#117733", "#44AA99", "#88CCEE", "#DDCC77", "#CC6677", "#882255", "grey"))
)
# Create data for the graph.
# Whole genome
percents <- c(0.1, 4.17, 10.52, 0.1, 3.82, 81.29)
TE_fams <- c("DNA transposons", "LINE", "LTR", "Non-LTR", "Unspecified", "Non-repetitive content")
colors <- c("#332288", "#44AA99", "#88CCEE", "#DDCC77", "#bebebe", "#878787")
pie(percents, col = colors)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
#### SET-UP ####
# load in required libraries
library(data.table)
library(tidyverse)
library(foreach)
library(PNWColors)
library(viridis)
#remotes::install_github("idmn/ggview")
library(ggview)
# set the desired window size in bp
window_size = 1000000
# set the current genome name
genomeName="AphCoe_V3_internal_Mar2024"
speciesName = "Aphelocoma coerulescens"
speciesCommonName = "Florida Scrub-Jay"
# load the scaffold.lengths file, containing the sizes for each chromosome in the assembly
primaryAssembly <- fread("/Users/Faye/Documents/FSJ_genome/FIGURES/scaffold.lengths_AphCoe_V3_internal_Mar2024.txt")
# load the convert.txt file, allowing to convert between chromosome id and readable name
convert <- read.table("/Users/Faye/Documents/FSJ_genome/FIGURES/AphCoe_V3_internal_Mar2024.convert.txt", header = FALSE,  sep = "\t")
# name the columns of convert respectively
colnames(convert) <- c("Chr", "ChromosomeID")
# add the lengths of each chromosomes to the convert dataframe
convert.2 <- merge(primaryAssembly, convert, by.x = "V1", by.y = "ChromosomeID")
# find the order of chromosomes from largest to smallest
order.ind <- order(-convert.2$V2)
# use that order to get a vector of the chromosomes in their proper order
chr.order <- convert.2$Chr[order.ind]
#### SUMMARY STATS ####
assemblySizes <- function(sizesFile){
sizes <- sizesFile
names(sizes) <- c("scaff","bp")
sizes <- sizes[order(sizes$bp),]
sizes$sizescum <-  cumsum(sizes$bp)
N50 <-  unlist(sizes[sizes$sizescum - (sum(sizes$bp)/2) >= 0,][1,2])
cat("Number of scaffolds is: ",length(sizes$bp),'\n')
cat("genome size is: ",sum(sizes$bp),'bp (',sum(sizes$bp)/1000000000,'gb)\n')
cat("genome N50 is: ",N50[1],"bp (",N50[1]/1000000,"mb)\n")
print(ggplot(sizes,aes(x=bp/1000000)) + geom_histogram(bins=30))
return(sizes[,-3])
}
homologyMap <- function(conversionFile,sizes){
homology_conversion <- fread(conversionFile)
names(homology_conversion) <- c("homolog", "scaffold")
size_homology <- left_join(sizes,homology_conversion,by=c("scaff"="scaffold"))
size_homology$homolog_up <- factor(size_homology$homolog, levels = c(unique(na.omit(size_homology$homolog[order(-size_homology$bp)]))))
size_homology$homolog_down <- factor(size_homology$homolog, levels = c(unique(na.omit(size_homology$homolog[order(size_homology$bp)]))));
#stats on scaffolds with/without homologs
cat("Homology search returned",length(unique(size_homology$scaff[!is.na(size_homology$homolog)])),"scaffolds with significant homology to",length(unique(size_homology$homolog)),"chromosomes\n" )
cat("\n\nAssembly stats for scaffolds with homology\n")
assemblySizes(size_homology[!is.na(size_homology$homolog),c(1,2)])
cat("\n\nAssembly stats for scaffolds without homology\n")
assemblySizes(size_homology[is.na(size_homology$homolog),c(1,2)])
return(size_homology)
}
#Obtain scaffold sizes
sizes_primary <- assemblySizes(primaryAssembly)
size_homology <- homologyMap(conversionFile=paste0("/Users/Faye/Documents/FSJ_genome/FIGURES/AphCoe_V3_internal_Mar2024.convert.txt"),
size=sizes_primary) #input for Hi-C function later!
#### BASE COUNTING ####
target <- c("1","1A","2", "3", "4","4A", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28","29", "30", "31", "34", "W", "Z")
calcGapsNBases <- function(bybaseFile,homology_conversion,gap_window){
bybase <- fread(bybaseFile)
bybase$scaffold <- gsub(pattern = ">","",bybase$scaffold)
#remove last window on each scaffold (they are less than full length)
bybase_filt <- bybase %>% group_by(scaffold) %>% filter(bp != max(bp))
bybase_filt <- left_join(bybase_filt,homology_conversion,by=c("scaffold"="scaff"))
#bybase_filt$N_frac <- bybase_filt$N / gap_window
bybase_filt$GC <- (bybase_filt$G + bybase_filt$C)/ gap_window
bybase_filt$AT <- (bybase_filt$A + bybase_filt$T)/ gap_window
bybase_filt$mb <- as.numeric(bybase_filt$bp.x) / 1000000
print(
ggplot(bybase_filt %>% filter(!is.na(homolog_up)),aes(x=homolog_up,y=GC)) +
geom_boxplot() +
scale_x_discrete(limits = target) +
theme_bw(base_size=15) + guides(fill="none") +
labs(x = "", y = "GC content\n(Prop of Chromosome)") +
theme(strip.background =element_rect(fill="white"),axis.text.y = element_text(size = 20), axis.title = element_text(size = 21), axis.text.x = element_text(size = 14)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_fill_manual(values = c(
"cornflowerblue",
"indianred"))
)
return(bybase_filt %>% dplyr::select(scaffold,homolog,mb,GC,AT))
}
bybase <-
calcGapsNBases(bybaseFile="/Users/Faye/Documents/FSJ_genome/FIGURES/AphCoe_V3_internal_Mar2024.clean.gapsINwin50kb.txt",
homology_conversion=size_homology,
gap_window= window_size)
temp.base <- bybase %>%
group_by(scaffold) %>%
summarize(GC_content = mean(GC))
colnames(convert.2) <- c("scaffold", "length", "Chr")
#Obtain GC content by scaffold
GC_content_df <- merge(temp.base, convert.2, by = "scaffold", all = TRUE)
#### WINDOWED REPEAT CONTENT PER CHROMOSOME ####
windowedMap <- function(window_size,sizes){
m_map <-
foreach(chrom1=unique(sizes$scaff[sizes$bp > window_size]),.combine=rbind) %do% {
win_tmp <-foreach(win1=seq(0,sizes$bp[sizes$scaff == chrom1],window_size),.combine=rbind) %do% {
pos_tmp <- c(chrom1,win1)
}
win_tmp
}
df_map <- as.data.frame(m_map)
df_map$V2 <- as.numeric(as.character(df_map$V2))
df_map$mat_pos <- seq(1,length(df_map$V2 ),1)
df_map$mb <- df_map$V2 / 1000000
return(df_map)
}
df_map <- windowedMap(sizes=sizes_primary,window_size = window_size)
makeRepeatWindows <- function(genomeName,repeatFile=NA, window_size_TE ,df_map, homology_conversion){
if(is.na(repeatFile)){
repeatFile=paste0('/Users/Faye/Documents/FSJ_genome/FIGURES/AphCoe_V3_internal_Mar2024.fasta.out')
}
}
repeatFile=paste0('/Users/Faye/Documents/FSJ_genome/FIGURES/AphCoe_V3_internal_Mar2024.fasta.out')
All_repeats <- fread(repeatFile,header=FALSE, sep=" ",fill = TRUE,skip=3)
names(All_repeats) <- c("SWscore","pdiverged","pdeleted","pinserted","scaff","LG_start","LG_end","left","dir","repeatname","family","rep_start","rep_end","end_left","ID","star")
All_repeats <- separate(All_repeats, family,  c("family","subfam"),
sep = "/", remove = TRUE, convert = FALSE, extra = "merge", fill = "right")
#filter and re-categorize
All_repeats <- All_repeats[All_repeats$family != "ARTEFACT",]
All_repeats$family[All_repeats$family %in% c("Unknown","Unspecified","Other")] <- "Unspecified"
All_repeats$family[All_repeats$family %in% c("LTR?","LTR")] <- "LTR"
All_repeats$family[All_repeats$family %in% c("SINE","SINE2","SINE?")] <- "Non-LTR"
All_repeats$family[All_repeats$family %in% c("LINE","LINE?")] <- "LINE"
All_repeats$family[All_repeats$family %in% c("DNA","Tc1-Mariner","RC","RC?","DNA?")] <- "DNA transposon"
All_repeats$family[All_repeats$family %in% c("tRNA","rRNA","snRNA","scRNA")] <- "house RNAs"
All_repeats$family[All_repeats$family %in% c("Low_complexity", "Simple_repeat")] <- "Simple repeat"
All_repeats_mut <-
All_repeats %>%
mutate(LG_lower_start=pmin(LG_start,LG_end), featuresize=abs(LG_start-LG_end)) %>%
group_by(scaff) %>%
mutate( LG_lower_start_adj=LG_lower_start-min(LG_lower_start))
cat("Total repeat length:",sum(All_repeats_mut$featuresize)/1000000 ,"mb\n")
cat("repeats account for",(sum(All_repeats_mut$featuresize) / sum(size_homology$bp))*100,"% of the assembly\n")
All_repeats_lengths <- as.data.frame(All_repeats_mut %>% group_by(family) %>% summarise(length=sum(featuresize),n=n()))
All_repeats_lengths$frac <-   All_repeats_lengths$length / sum(size_homology$bp)
cat("The most common element is...\n")
print(All_repeats_lengths[order(-All_repeats_lengths$n),][c(1:2),])
cat("The element making up the largest fraction of the genome is...\n")
print(All_repeats_lengths[order(-All_repeats_lengths$frac),][c(1:2),])
All_repeats_win <-
All_repeats_mut %>% group_by(scaff,family)  %>%
mutate(position_window=LG_lower_start_adj%/%as.numeric(window_size)) %>%
group_by(scaff,position_window,family) %>%
add_tally() %>% select_if(., is.numeric) %>%
#summarize_all(funs(sum(., na.rm = T), mean(., na.rm = T))) %>% #depreciated in dplyr 0.8.0
summarize_all(list(~ sum(., na.rm = T), ~ mean(., na.rm = T))) %>%
mutate(proportion_of_window=featuresize_sum/as.numeric(window_size)) %>%
mutate(window_start=(position_window*(as.numeric(window_size)+1)) )
All_repeats_win$mb <- round(as.numeric(All_repeats_win$window_start) / 1000000)
##add in empty windows for each family: make data.frame with full length of windows for each chrom/scaff
df_map_TE <-
foreach(TEfam=unique(All_repeats_win$family),.combine=rbind.data.frame) %do% {
cbind.data.frame(df_map,"TEfam"=TEfam )
}
All_repeats_zeros <- left_join(df_map_TE,All_repeats_win,by=c("V1"="scaff","mb"="mb","TEfam"="family"))
All_repeats_zeros$proportion_of_window[is.na(All_repeats_zeros$proportion_of_window)] <- 0
All_repeats_zeros <- left_join(All_repeats_zeros,size_homology,by=c("V1"="scaff"))
All_repeats_zeros_filt <- All_repeats_zeros %>% filter(!is.na(homolog_up))
All_repeats_zeros_filt$homolog_up_f = factor(All_repeats_zeros_filt$homolog_up, levels=c("1","1A","2", "3", "4","4A", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28","29", "30", "31", "34", "W", "Z"))
print(
#BRIAN, THIS IS WHAT YOU WANT:
#Here, we plot windowed repeat content per chromosome
All_repeats_zeros_filt %>%
filter(., TEfam != "PLE") %>%
ggplot(., aes(x = mb, y = proportion_of_window, fill = TEfam)) +
geom_area(position = "stack") +
facet_wrap(. ~ homolog_up_f, strip.position = "bottom", scales = "free", ncol = 5) +
labs(x = "Position (Mb)", y = "Proportion of window") + # Changed axis labels
theme_bw(base_size = 11) +
theme(strip.text = element_text(size = 9.5),
legend.text = element_text(size = 9.5),
strip.background = element_rect(fill = "white"),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
#panel.spacing = unit(-0.1, "cm"),
panel.border = element_rect(color = "white", fill = NA, linewidth = 0)) +
scale_fill_manual("", values = c("#332288", "#117733", "#44AA99", "#88CCEE", "#DDCC77", "#CC6677", "#882255", "grey"))
)
#ggview(plot = ggplot2::last_plot(), units = "in", width = 9, height = 9)
#### PROPORTION REPEAT CONTENT PER CHROMOSOME ####
All_repeats <- fread("/Users/Faye/Documents/FSJ_genome/FIGURES/AphCoe_V3_internal_Mar2024.fasta.out",sep=" ",fill = TRUE,skip=3)
names(All_repeats) <- c("SWscore","pdiverged","pdeleted","pinserted","scaff","LG_start","LG_end","left","dir","repeatname","family","rep_start","rep_end","end_left","ID","star")
All_repeats <- separate(All_repeats, family,  c("family","subfam"),
sep = "/", remove = TRUE, convert = FALSE, extra = "merge", fill = "right")
#filter and re-categorize
All_repeats <- All_repeats[All_repeats$family != "ARTEFACT",]
All_repeats$family[All_repeats$family %in% c("Unknown","Unspecified","Other", "PLE")] <- "Unspecified"
All_repeats$family[All_repeats$family %in% c("LTR?","LTR")] <- "LTR"
All_repeats$family[All_repeats$family %in% c("SINE","SINE2","SINE?")] <- "Non-LTR"
All_repeats$family[All_repeats$family %in% c("LINE","LINE?")] <- "LINE"
All_repeats$family[All_repeats$family %in% c("DNA","Tc1-Mariner","RC","RC?","DNA?")] <- "DNA transposon"
All_repeats$family[All_repeats$family %in% c("tRNA","rRNA","snRNA","scRNA")] <- "house RNAs"
All_repeats$family[All_repeats$family %in% c("Low_complexity", "Simple_repeat")] <- "Simple repeat"
All_repeats_mut <-
All_repeats %>%
mutate(LG_lower_start=pmin(LG_start,LG_end), featuresize=abs(LG_start-LG_end)) %>%
group_by(scaff) %>%
mutate( LG_lower_start_adj=LG_lower_start-min(LG_lower_start))
cat("Total repeat length across the genome:",sum(All_repeats_mut$featuresize)/1000000 ,"mb\n")
cat("repeats account for",(sum(All_repeats_mut$featuresize) / sum(size_homology$bp))*100,"% of the total assembly\n")
colnames(All_repeats_mut)[5] <- "scaffold"
All_repeats_chroms <- merge(All_repeats_mut, convert.2, by = "scaffold")
#Obtain percent of each TE superfam per chromosome
All_repeats_summary <- All_repeats_chroms %>%
distinct(., ID, .keep_all = TRUE) %>%
group_by(Chr, family) %>%
reframe(scaffold, total_fam_length = sum(featuresize), length_Chr = length) %>%
reframe(scaffold, Chr, family, total_fam_length, length_Chr, prop_of_chrom = total_fam_length/length_Chr) %>%
distinct()
#BRIAN, THIS IS WHAT YOU WANT:
#Plot of repeat family per chromosome
ggplot(data = All_repeats_summary, aes(x = Chr, y = prop_of_chrom, fill = family)) +
geom_col(position = "stack") +
scale_x_discrete(limits = target) +
scale_fill_manual("", values = c("#ffd700", "#ffb14e", "#fa8775", "#ea5f94", "#cd34b5", "#9d02d7", "#0000ff", "grey")) +
theme_classic() +
labs(x = "Chromosome", y = "Proportion of Chromosome", fill = "") +
theme(axis.text = element_text(size = 12), axis.title = element_text(size = 14))
#Obtain percent repeat content per chromosome
Repeats_per_chrom <- All_repeats_summary %>%
group_by(Chr) %>%
reframe(scaffold, all_repeat_content = sum(total_fam_length), length_Chr) %>%
reframe(scaffold, Chr, all_repeat_content, length_Chr, repeat_prop = all_repeat_content/length_Chr) %>%
distinct() %>%
arrange(factor(Chr, levels = target))
#Mean repeat content of autosomes
mean(filter(Repeats_per_chrom, !(row_number() %in% c(32, 33)))$repeat_prop)
#Plot of total repeat content per chromosome
ggplot(Repeats_per_chrom, aes(x = Chr, y = repeat_prop)) +
geom_point(size = 3) +
scale_x_discrete(limits = target) +
theme_bw() +
labs(x = "Chromosome", y = "Repeat Content (% of Chromosome)") +
theme(axis.text = element_text(size = 14), axis.title = element_text(size = 18))
All_repeats_lengths <- as.data.frame(All_repeats_mut %>% group_by(family) %>% summarise(length=sum(featuresize),n=n()))
All_repeats_lengths$frac <-   All_repeats_lengths$length / sum(size_homology$bp)
cat("The most common element is...\n")
print(All_repeats_lengths[order(-All_repeats_lengths$n),][c(1:2),])
cat("The element making up the largest fraction of the genome is...\n")
print(All_repeats_lengths[order(-All_repeats_lengths$frac),][c(1:2),])
#### SET-UP ####
# load in required libraries
library(data.table)
library(tidyverse)
library(foreach)
library(PNWColors)
library(viridis)
#remotes::install_github("idmn/ggview")
library(ggview)
# set the desired window size in bp
window_size = 50000
# set the current genome name
genomeName="AphCoe_V3_internal_Mar2024"
speciesName = "Aphelocoma coerulescens"
speciesCommonName = "Florida Scrub-Jay"
# load the scaffold.lengths file, containing the sizes for each chromosome in the assembly
primaryAssembly <- fread("/Users/Faye/Documents/FSJ_genome/FIGURES/scaffold.lengths_AphCoe_V3_internal_Mar2024.txt")
# load the convert.txt file, allowing to convert between chromosome id and readable name
convert <- read.table("/Users/Faye/Documents/FSJ_genome/FIGURES/AphCoe_V3_internal_Mar2024.convert.txt", header = FALSE,  sep = "\t")
# name the columns of convert respectively
colnames(convert) <- c("Chr", "ChromosomeID")
# add the lengths of each chromosomes to the convert dataframe
convert.2 <- merge(primaryAssembly, convert, by.x = "V1", by.y = "ChromosomeID")
# find the order of chromosomes from largest to smallest
order.ind <- order(-convert.2$V2)
# use that order to get a vector of the chromosomes in their proper order
chr.order <- convert.2$Chr[order.ind]
#### SUMMARY STATS ####
assemblySizes <- function(sizesFile){
sizes <- sizesFile
names(sizes) <- c("scaff","bp")
sizes <- sizes[order(sizes$bp),]
sizes$sizescum <-  cumsum(sizes$bp)
N50 <-  unlist(sizes[sizes$sizescum - (sum(sizes$bp)/2) >= 0,][1,2])
cat("Number of scaffolds is: ",length(sizes$bp),'\n')
cat("genome size is: ",sum(sizes$bp),'bp (',sum(sizes$bp)/1000000000,'gb)\n')
cat("genome N50 is: ",N50[1],"bp (",N50[1]/1000000,"mb)\n")
print(ggplot(sizes,aes(x=bp/1000000)) + geom_histogram(bins=30))
return(sizes[,-3])
}
homologyMap <- function(conversionFile,sizes){
homology_conversion <- fread(conversionFile)
names(homology_conversion) <- c("homolog", "scaffold")
size_homology <- left_join(sizes,homology_conversion,by=c("scaff"="scaffold"))
size_homology$homolog_up <- factor(size_homology$homolog, levels = c(unique(na.omit(size_homology$homolog[order(-size_homology$bp)]))))
size_homology$homolog_down <- factor(size_homology$homolog, levels = c(unique(na.omit(size_homology$homolog[order(size_homology$bp)]))));
#stats on scaffolds with/without homologs
cat("Homology search returned",length(unique(size_homology$scaff[!is.na(size_homology$homolog)])),"scaffolds with significant homology to",length(unique(size_homology$homolog)),"chromosomes\n" )
cat("\n\nAssembly stats for scaffolds with homology\n")
assemblySizes(size_homology[!is.na(size_homology$homolog),c(1,2)])
cat("\n\nAssembly stats for scaffolds without homology\n")
assemblySizes(size_homology[is.na(size_homology$homolog),c(1,2)])
return(size_homology)
}
#Obtain scaffold sizes
sizes_primary <- assemblySizes(primaryAssembly)
size_homology <- homologyMap(conversionFile=paste0("/Users/Faye/Documents/FSJ_genome/FIGURES/AphCoe_V3_internal_Mar2024.convert.txt"),
size=sizes_primary) #input for Hi-C function later!
#### BASE COUNTING ####
target <- c("1","1A","2", "3", "4","4A", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28","29", "30", "31", "34", "W", "Z")
calcGapsNBases <- function(bybaseFile,homology_conversion,gap_window){
bybase <- fread(bybaseFile)
bybase$scaffold <- gsub(pattern = ">","",bybase$scaffold)
#remove last window on each scaffold (they are less than full length)
bybase_filt <- bybase %>% group_by(scaffold) %>% filter(bp != max(bp))
bybase_filt <- left_join(bybase_filt,homology_conversion,by=c("scaffold"="scaff"))
#bybase_filt$N_frac <- bybase_filt$N / gap_window
bybase_filt$GC <- (bybase_filt$G + bybase_filt$C)/ gap_window
bybase_filt$AT <- (bybase_filt$A + bybase_filt$T)/ gap_window
bybase_filt$mb <- as.numeric(bybase_filt$bp.x) / 1000000
print(
ggplot(bybase_filt %>% filter(!is.na(homolog_up)),aes(x=homolog_up,y=GC)) +
geom_boxplot() +
scale_x_discrete(limits = target) +
theme_bw(base_size=15) + guides(fill="none") +
labs(x = "", y = "GC content\n(Prop of Chromosome)") +
theme(strip.background =element_rect(fill="white"),axis.text.y = element_text(size = 20), axis.title = element_text(size = 21), axis.text.x = element_text(size = 14)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
scale_fill_manual(values = c(
"cornflowerblue",
"indianred"))
)
return(bybase_filt %>% dplyr::select(scaffold,homolog,mb,GC,AT))
}
bybase <-
calcGapsNBases(bybaseFile="/Users/Faye/Documents/FSJ_genome/FIGURES/AphCoe_V3_internal_Mar2024.clean.gapsINwin50kb.txt",
homology_conversion=size_homology,
gap_window= window_size)
temp.base <- bybase %>%
group_by(scaffold) %>%
summarize(GC_content = mean(GC))
colnames(convert.2) <- c("scaffold", "length", "Chr")
#Obtain GC content by scaffold
GC_content_df <- merge(temp.base, convert.2, by = "scaffold", all = TRUE)
#### WINDOWED REPEAT CONTENT PER CHROMOSOME ####
windowedMap <- function(window_size,sizes){
m_map <-
foreach(chrom1=unique(sizes$scaff[sizes$bp > window_size]),.combine=rbind) %do% {
win_tmp <-foreach(win1=seq(0,sizes$bp[sizes$scaff == chrom1],window_size),.combine=rbind) %do% {
pos_tmp <- c(chrom1,win1)
}
win_tmp
}
df_map <- as.data.frame(m_map)
df_map$V2 <- as.numeric(as.character(df_map$V2))
df_map$mat_pos <- seq(1,length(df_map$V2 ),1)
df_map$mb <- df_map$V2 / 1000000
return(df_map)
}
df_map <- windowedMap(sizes=sizes_primary,window_size = window_size)
makeRepeatWindows <- function(genomeName,repeatFile=NA, window_size_TE ,df_map, homology_conversion){
if(is.na(repeatFile)){
repeatFile=paste0('/Users/Faye/Documents/FSJ_genome/FIGURES/AphCoe_V3_internal_Mar2024.fasta.out')
}
}
repeatFile=paste0('/Users/Faye/Documents/FSJ_genome/FIGURES/AphCoe_V3_internal_Mar2024.fasta.out')
All_repeats <- fread(repeatFile,header=FALSE, sep=" ",fill = TRUE,skip=3)
names(All_repeats) <- c("SWscore","pdiverged","pdeleted","pinserted","scaff","LG_start","LG_end","left","dir","repeatname","family","rep_start","rep_end","end_left","ID","star")
All_repeats <- separate(All_repeats, family,  c("family","subfam"),
sep = "/", remove = TRUE, convert = FALSE, extra = "merge", fill = "right")
#filter and re-categorize
All_repeats <- All_repeats[All_repeats$family != "ARTEFACT",]
All_repeats$family[All_repeats$family %in% c("Unknown","Unspecified","Other")] <- "Unspecified"
All_repeats$family[All_repeats$family %in% c("LTR?","LTR")] <- "LTR"
All_repeats$family[All_repeats$family %in% c("SINE","SINE2","SINE?")] <- "Non-LTR"
All_repeats$family[All_repeats$family %in% c("LINE","LINE?")] <- "LINE"
All_repeats$family[All_repeats$family %in% c("DNA","Tc1-Mariner","RC","RC?","DNA?")] <- "DNA transposon"
All_repeats$family[All_repeats$family %in% c("tRNA","rRNA","snRNA","scRNA")] <- "house RNAs"
All_repeats$family[All_repeats$family %in% c("Low_complexity", "Simple_repeat")] <- "Simple repeat"
All_repeats_mut <-
All_repeats %>%
mutate(LG_lower_start=pmin(LG_start,LG_end), featuresize=abs(LG_start-LG_end)) %>%
group_by(scaff) %>%
mutate( LG_lower_start_adj=LG_lower_start-min(LG_lower_start))
cat("Total repeat length:",sum(All_repeats_mut$featuresize)/1000000 ,"mb\n")
cat("repeats account for",(sum(All_repeats_mut$featuresize) / sum(size_homology$bp))*100,"% of the assembly\n")
All_repeats_lengths <- as.data.frame(All_repeats_mut %>% group_by(family) %>% summarise(length=sum(featuresize),n=n()))
All_repeats_lengths$frac <-   All_repeats_lengths$length / sum(size_homology$bp)
cat("The most common element is...\n")
print(All_repeats_lengths[order(-All_repeats_lengths$n),][c(1:2),])
cat("The element making up the largest fraction of the genome is...\n")
print(All_repeats_lengths[order(-All_repeats_lengths$frac),][c(1:2),])
All_repeats_win <-
All_repeats_mut %>% group_by(scaff,family)  %>%
mutate(position_window=LG_lower_start_adj%/%as.numeric(window_size)) %>%
group_by(scaff,position_window,family) %>%
add_tally() %>% select_if(., is.numeric) %>%
#summarize_all(funs(sum(., na.rm = T), mean(., na.rm = T))) %>% #depreciated in dplyr 0.8.0
summarize_all(list(~ sum(., na.rm = T), ~ mean(., na.rm = T))) %>%
mutate(proportion_of_window=featuresize_sum/as.numeric(window_size)) %>%
mutate(window_start=(position_window*(as.numeric(window_size)+1)) )
All_repeats_win$mb <- round(as.numeric(All_repeats_win$window_start) / 1000000)
##add in empty windows for each family: make data.frame with full length of windows for each chrom/scaff
df_map_TE <-
foreach(TEfam=unique(All_repeats_win$family),.combine=rbind.data.frame) %do% {
cbind.data.frame(df_map,"TEfam"=TEfam )
}
All_repeats_zeros <- left_join(df_map_TE,All_repeats_win,by=c("V1"="scaff","mb"="mb","TEfam"="family"))
All_repeats_zeros$proportion_of_window[is.na(All_repeats_zeros$proportion_of_window)] <- 0
All_repeats_zeros <- left_join(All_repeats_zeros,size_homology,by=c("V1"="scaff"))
All_repeats_zeros_filt <- All_repeats_zeros %>% filter(!is.na(homolog_up))
All_repeats_zeros_filt$homolog_up_f = factor(All_repeats_zeros_filt$homolog_up, levels=c("1","1A","2", "3", "4","4A", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28","29", "30", "31", "34", "W", "Z"))
print(
#BRIAN, THIS IS WHAT YOU WANT:
#Here, we plot windowed repeat content per chromosome
All_repeats_zeros_filt %>%
filter(., TEfam != "PLE") %>%
ggplot(., aes(x = mb, y = proportion_of_window, fill = TEfam)) +
geom_area(position = "stack") +
facet_wrap(. ~ homolog_up_f, strip.position = "bottom", scales = "free", ncol = 5) +
labs(x = "Position (Mb)", y = "Proportion of window") + # Changed axis labels
theme_bw(base_size = 11) +
theme(strip.text = element_text(size = 9.5),
legend.text = element_text(size = 9.5),
strip.background = element_rect(fill = "white"),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
#panel.spacing = unit(-0.1, "cm"),
panel.border = element_rect(color = "white", fill = NA, linewidth = 0)) +
scale_fill_manual("", values = c("#332288", "#117733", "#44AA99", "#88CCEE", "#DDCC77", "#CC6677", "#882255", "grey"))
)
#ggview(plot = ggplot2::last_plot(), units = "in", width = 9, height = 9)
#### PROPORTION REPEAT CONTENT PER CHROMOSOME ####
All_repeats <- fread("/Users/Faye/Documents/FSJ_genome/FIGURES/AphCoe_V3_internal_Mar2024.fasta.out",sep=" ",fill = TRUE,skip=3)
names(All_repeats) <- c("SWscore","pdiverged","pdeleted","pinserted","scaff","LG_start","LG_end","left","dir","repeatname","family","rep_start","rep_end","end_left","ID","star")
All_repeats <- separate(All_repeats, family,  c("family","subfam"),
sep = "/", remove = TRUE, convert = FALSE, extra = "merge", fill = "right")
#filter and re-categorize
All_repeats <- All_repeats[All_repeats$family != "ARTEFACT",]
All_repeats$family[All_repeats$family %in% c("Unknown","Unspecified","Other", "PLE")] <- "Unspecified"
All_repeats$family[All_repeats$family %in% c("LTR?","LTR")] <- "LTR"
All_repeats$family[All_repeats$family %in% c("SINE","SINE2","SINE?")] <- "Non-LTR"
All_repeats$family[All_repeats$family %in% c("LINE","LINE?")] <- "LINE"
All_repeats$family[All_repeats$family %in% c("DNA","Tc1-Mariner","RC","RC?","DNA?")] <- "DNA transposon"
All_repeats$family[All_repeats$family %in% c("tRNA","rRNA","snRNA","scRNA")] <- "house RNAs"
All_repeats$family[All_repeats$family %in% c("Low_complexity", "Simple_repeat")] <- "Simple repeat"
All_repeats_mut <-
All_repeats %>%
mutate(LG_lower_start=pmin(LG_start,LG_end), featuresize=abs(LG_start-LG_end)) %>%
group_by(scaff) %>%
mutate( LG_lower_start_adj=LG_lower_start-min(LG_lower_start))
cat("Total repeat length across the genome:",sum(All_repeats_mut$featuresize)/1000000 ,"mb\n")
cat("repeats account for",(sum(All_repeats_mut$featuresize) / sum(size_homology$bp))*100,"% of the total assembly\n")
colnames(All_repeats_mut)[5] <- "scaffold"
All_repeats_chroms <- merge(All_repeats_mut, convert.2, by = "scaffold")
#Obtain percent of each TE superfam per chromosome
All_repeats_summary <- All_repeats_chroms %>%
distinct(., ID, .keep_all = TRUE) %>%
group_by(Chr, family) %>%
reframe(scaffold, total_fam_length = sum(featuresize), length_Chr = length) %>%
reframe(scaffold, Chr, family, total_fam_length, length_Chr, prop_of_chrom = total_fam_length/length_Chr) %>%
distinct()
#BRIAN, THIS IS WHAT YOU WANT:
#Plot of repeat family per chromosome
ggplot(data = All_repeats_summary, aes(x = Chr, y = prop_of_chrom, fill = family)) +
geom_col(position = "stack") +
scale_x_discrete(limits = target) +
scale_fill_manual("", values = c("#ffd700", "#ffb14e", "#fa8775", "#ea5f94", "#cd34b5", "#9d02d7", "#0000ff", "grey")) +
theme_classic() +
labs(x = "Chromosome", y = "Proportion of Chromosome", fill = "") +
theme(axis.text = element_text(size = 12), axis.title = element_text(size = 14))
#Obtain percent repeat content per chromosome
Repeats_per_chrom <- All_repeats_summary %>%
group_by(Chr) %>%
reframe(scaffold, all_repeat_content = sum(total_fam_length), length_Chr) %>%
reframe(scaffold, Chr, all_repeat_content, length_Chr, repeat_prop = all_repeat_content/length_Chr) %>%
distinct() %>%
arrange(factor(Chr, levels = target))
#Mean repeat content of autosomes
mean(filter(Repeats_per_chrom, !(row_number() %in% c(32, 33)))$repeat_prop)
#Plot of total repeat content per chromosome
ggplot(Repeats_per_chrom, aes(x = Chr, y = repeat_prop)) +
geom_point(size = 3) +
scale_x_discrete(limits = target) +
theme_bw() +
labs(x = "Chromosome", y = "Repeat Content (% of Chromosome)") +
theme(axis.text = element_text(size = 14), axis.title = element_text(size = 18))
All_repeats_lengths <- as.data.frame(All_repeats_mut %>% group_by(family) %>% summarise(length=sum(featuresize),n=n()))
All_repeats_lengths$frac <-   All_repeats_lengths$length / sum(size_homology$bp)
cat("The most common element is...\n")
print(All_repeats_lengths[order(-All_repeats_lengths$n),][c(1:2),])
cat("The element making up the largest fraction of the genome is...\n")
print(All_repeats_lengths[order(-All_repeats_lengths$frac),][c(1:2),])
